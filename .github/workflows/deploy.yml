# .github/workflows/deploy.yaml
on:
  workflow_call:
    inputs:
      env:
        type: string
      ecs_service:
        type: string
      ecs_task_definition:
        type: string
      container_name:
        type: string
      aws_region:
        type: string
        default: 'us-east-2'
      ecr_repository:
        type: string
        default: 'ecs-test-deploy-ecr'
      ecs_cluster:
        type: string
        default: 'ecs-test-deploy-cluster'
      image_tag:
        type: string
        default: ${{ github.sha }}
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  deploy:
    name: Deploy to ${{ inputs.env }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}

    env:
      AWS_REGION: ${{ inputs.aws_region }}
      ECR_REPOSITORY: ${{ inputs.ecr_repository }}
      ECS_CLUSTER: ${{ inputs.ecs_cluster }}
      IMAGE_TAG: ${{ inputs.image_tag }}

    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Setup JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag & push Docker image
        id: build-image
        run: |
          docker build \
            -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" \
            >> $GITHUB_OUTPUT

      - name: Render ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ inputs.ecs_task_definition }}
          container-name:  ${{ inputs.container_name }}
          image:           ${{ steps.build-image.outputs.image }}

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster:         ${{ env.ECS_CLUSTER }}
          service:         ${{ inputs.ecs_service }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true
