# name: main

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:
#     inputs:
#       ref:
#         description: 'Commit ID or branch name'
#         required: true
#         default: 'main'

# env:
#   AWS_REGION: us-east-2
#   ECR_REPOSITORY: ecs-test-deploy-ecr
#   ECS_CLUSTER: ecs-test-deploy-cluster
#   IMAGE_TAG: ${{ github.sha }}

# permissions:
#   contents: read


# jobs:
#   deploy:
#     name: Deploy ${{ matrix.env }}
#     runs-on: ubuntu-latest
# #The matrix lets you define multiple sets of parameters (like “dev” vs “prod”) and then runs the same job once for each set—in parallel—using those different values.
#     strategy:
#       matrix:
#         include:
#           - env: dev
#             ECS_SERVICE: ecs-test-deploy-task-defination-family-service-dn8avkrj-dev
#             ECS_TASK_DEFINITION: deployment/dev-task-definition.json
#             CONTAINER_NAME: ecs-test-deploy-api-container 
#           - env: prod
#             ECS_SERVICE: ecs-test-deploy-task-defination-family-service-qu49gdam-prod
#             ECS_TASK_DEFINITION: deployment/dev-task-definition.json
#             CONTAINER_NAME: ecs-test-deploy-api-container #can't change container name either here or in the task defination, only approach is to create a new task defiation for prod

#     environment: ${{ matrix.env }} #  line tells GitHub Actions which Environment (e.g. “dev” or “prod”) this job is targeting.

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
#         with:
#           ref: ${{ github.event.inputs.ref || 'main' }}

#       - name: Setup JDK 17
#         uses: actions/setup-java@v2
#         with:
#           distribution: 'adopt'
#           java-version: '17'

#       - name: Cache Gradle
#         uses: actions/cache@v3
#         with:
#           path: |
#             ~/.gradle/caches
#             ~/.gradle/wrapper
#           key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

#       - name: Build with Gradle
#         run: ./gradlew clean build

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build, Tag & Push Image
#         id: build-image
#         run: |
#           docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
#           docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
#           echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

#       - name: Render ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ${{ matrix.ECS_TASK_DEFINITION }}
#           container-name: ${{ matrix.CONTAINER_NAME }}
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Deploy to ECS
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           cluster: ${{ env.ECS_CLUSTER }}
#           service: ${{ matrix.ECS_SERVICE }}
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           wait-for-service-stability: true